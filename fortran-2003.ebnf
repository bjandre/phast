(* grako ebnf grammer for a subset of fortran 2003-ish

syntax rules from draft of fortran standard 1539-1:2004(E)

RNNN - language syntax rule NNN

*)

(* R201 *)
program = { program_unit }+
        ;        

(* R202 *)
program_unit = main_program |
              external_subprogram |
              module |
              block_data
              ;

(* R1101 *)
main_program = [ program_stmt ]
              [ specification_part ]
              [ execution_part ]
              [ internal_subprogram_part ]
              end_program_stmt
              ;

(* R203 *)
external_subprogram = function_subprogram |
                     subroutine_subprogram
                     ;

(* R1223 *)
function_subprogram = function_stmt
                     [ specification_part ]
                     [ execution_part ]
                     [ internal_subprogram_part ]
                     end_function_stmt
                     ;

(* R1231 *)
subroutine_subprogram = subroutine_stmt
                       [ specification_part ]
                       [ execution_part ]
                       [ internal_subprogram_part ]
                       end_subroutine_stmt
                       ;
                       
(* R1104 *)
module = module_stmt
        [ specification_part ]
        [ module_subprogram_part ]
        end_module_stmt
        ;

(* R1116 *)
block_data = block_data_stmt
            [ specification_part ]
            end_block_data_stmt
            ;

(* R204 *)
specification_part = { use_stmt }*
                   { import_stmt }*
                   [ implicit_part ] 
                   { declaration_construct }*
                   ;

(* R205 *)
implicit_part = { implicit_part_stmt }*
               implicit_stmt
               ;

(* R206 *)
implicit_part_stmt = implicit_stmt |
                    parameter_stmt |
                    format_stmt |
                    entry_stmt
                    ;

(* R207 *)
declaration_construct = derived_type_def |
                       entry_stmt |
                       enum_def |
                       format_stmt |
                       interface_block |
                       parameter_stmt |
                       procedure_declaration_stmt |
                       specification_stmt |
                       type_declaration_stmt |
                       stmt_function_stmt
                       ;

(* R208 *)
execution_part = exeutable_construct
                [ execution_part_construt ]
                ;
                
(* R209 *)
execution_part_construct = execution_construct |
                          format_stmt |
                          entry_stmt |
                          data_stmt
                          ;

(* R210  *)
internal_subprogram_part = contains_stmt
                         { internal_subprogram }+
                         ;
(* R211  *)
internal_subprogram = function_subprogram |
                    subroutine_subprogram
                    ;
                    
(* R1107 *)
module_subprogram_part = contains_stmt
                       { module_subprogram }+
                       ;
                       
(* R1108 *)
module_subprogram = function_subprogram |
                  subroutine_subprogram
                  ;
                  
(* R212  *)
specification_stmt = access_stmt |
                   allocatable_stmt |
                   asynchronous_stmt |
                   bind_stmt |
                   common_stmt |
                   data_stmt |
                   dimension_stmt |
                   equivalence_stmt |
                   external_stmt |
                   intent_stmt |
                   intrinsic_stmt |
                   namelist_stmt |
                   optional_stmt |
                   pointer_stmt |
                   protected_stmt |
                   save_stmt |
                   target_stmt |
                   volatile_stmt |
                   value_stmt
                   ;

(* R213 *)
executable_construct = action_stmt |
                     associate_construct |
                     case_construct |
                     do_construct |
                     forall_construct |
                     if_construct |
                     select_type_construct |
                     where_construct
                     ;

(* R214 *)
action_stmt = allocate_stmt |
            assignment_stmt |
            backspace_stmt |
            call_stmt |
            close_stmt |
            continue_stmt |
            cycle_stmt |
            deallocate_stmt |
            endfile_stmt |
            end_function_stmt |
            end_program_stmt |
            end_subroutine_stmt |
            exit_stmt |
            flush_stmt |
            forall_stmt |
            goto_stmt |
            if_stmt |
            inquire_stmt |
            nullify_stmt |
            open_stmt |
            pointer_assignment_stmt |
            print_stmt |
            read_stmt |
            return_stmt |
            rewind_stmt |
            stop_stmt |
            wait_stmt |
            where_stmt |
            write_stmt |
            arithmetic_if_stmt |
            computed_goto_stmt
            ;


module_stmt = "module"
            ;
end_module_stmt = "end module"
                ;

use_stmt = "use"
         ;


contains_stmt = "contains"
              ;